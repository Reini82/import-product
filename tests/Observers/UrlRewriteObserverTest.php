<?php

/**
 * TechDivision\Import\Product\Observers\UrlRewriteObserverTest
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * PHP version 5
 *
 * @author    Tim Wagner <t.wagner@techdivision.com>
 * @copyright 2016 TechDivision GmbH <info@techdivision.com>
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link      https://github.com/techdivision/import-product
 * @link      http://www.techdivision.com
 */

namespace TechDivision\Import\Product\Observers;

use TechDivision\Import\Utils\MemberNames;
use TechDivision\Import\Product\Utils\ColumnKeys;

/**
 * Test class for the product URL rewrite observer implementation.
 *
 * @author    Tim Wagner <t.wagner@techdivision.com>
 * @copyright 2016 TechDivision GmbH <info@techdivision.com>
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link      https://github.com/techdivision/import-product
 * @link      http://www.techdivision.com
 */
class UrlRewriteObserverTest extends \PHPUnit_Framework_TestCase
{

    /**
     * The observer we want to test.
     *
     * @var \TechDivision\Import\Product\Observers\UrlRewriteObserver
     */
    protected $observer;

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     * @see \PHPUnit_Framework_TestCase::setUp()
     */
    protected function setUp()
    {
        $this->observer = new UrlRewriteObserver();
    }

    /**
     * Test's the getProductCategoryIds() method successfull.
     *
     * @return void
     */
    public function testGetProductCategoryIds()
    {

        // create a mock subject
        $mockSubject = $this->getMockBuilder('TechDivision\Import\Product\Subjects\BunchSubject')
                            ->setMethods(array('getProductCategoryIds'))
                            ->getMock();
        $mockSubject->expects($this->once())
                    ->method('getProductCategoryIds')
                    ->willReturn($productCategoryIds = array(13, 16, 37));

        // inject the subject
        $this->observer->setSubject($mockSubject);

        // make sure, the product category IDs will be loaded
        $this->assertSame($productCategoryIds, $this->observer->getProductCategoryIds());
    }

    /**
     * Test's the getUrlRewriteByUrlKey() method successfull.
     *
     * @return void
     */
    public function testGetUrlRewriteByUrlKeySuccessfull()
    {

        // create a mock subject
        $mockSubject = $this->getMockBuilder('TechDivision\Import\Product\Subjects\BunchSubject')
                            ->setMethods(array('getUrlRewritesByEntityTypeAndEntityId'))
                            ->getMock();
        $mockSubject->expects($this->once())
                    ->method('getUrlRewritesByEntityTypeAndEntityId')
                    ->with($entityType = 'product', $entityId = 61413)
                    ->willReturn(
                        $urlRewrite = array(
                            'url_rewrite_id'   => 744,
                            'entity_type'      => 'product',
                            'entity_id'        => 61413,
                            'request_path'     => 'bruno-compete-hoodie-test.html',
                            'target_path'      => 'catalog/product/view/id/61413',
                            'redirect_type'    => 0,
                            'store_id'         => 1,
                            'description'      => 'A custom rewrite',
                            'is_autogenerated' => 1,
                            'metadata'         => null
                        )
                    );

        // inject the subject
        $this->observer->setSubject($mockSubject);

        // make sure, the URL rewites will be loaded
        $this->assertSame($urlRewrite, $this->observer->getUrlRewritesByEntityTypeAndEntityId($entityType, $entityId));
    }

    /**
     * Test's the persistUrlRewrite() method successfull.
     *
     * @return void
     */
    public function testPersistUrlRewriteSuccessfull()
    {

        // create a mock subject
        $mockSubject = $this->getMockBuilder('TechDivision\Import\Product\Subjects\BunchSubject')
                            ->setMethods(array('persistUrlRewrite'))
                            ->getMock();
        $mockSubject->expects($this->once())
                    ->method('persistUrlRewrite')
                    ->with(
                        $urlRewrite = array(
                            'product',
                            61413,
                            'bruno-compete-hoodie-test.html',
                            'catalog/product/view/id/61413',
                            0,
                            1,
                            'A custom rewrite',
                            1,
                            null
                        )
                    );

        // inject the subject
        $this->observer->setSubject($mockSubject);

        // make sure, the URL rewite will be persisted
        $this->assertNull($this->observer->persistUrlRewrite($urlRewrite));
    }

    /**
     * Test's the deleteUrlRewrite() method successfull.
     *
     * @return void
     */
    public function testDeleteUrlRewriteSuccessfull()
    {

        // create a mock subject
        $mockSubject = $this->getMockBuilder('TechDivision\Import\Product\Subjects\BunchSubject')
                            ->setMethods(array('deleteUrlRewrite'))
                            ->getMock();
        $mockSubject->expects($this->once())
                    ->method('deleteUrlRewrite')
                    ->with($urlRewrite = array('url_rewrite_id' => 744));

        // inject the subject
        $this->observer->setSubject($mockSubject);

        // make sure, the URL rewite will be deleted
        $this->assertNull($this->observer->deleteUrlRewrite($urlRewrite));
    }

    /**
     * Test's the handle() method with a successfull URL rewrite persist.
     *
     * @return void
     */
    public function testHandleWithSuccessfullCreateWithoutCategories()
    {

        // create a dummy CSV file header
        $headers = array(
            'sku'             => 0,
            'url_key'         => 1,
            'store_view_code' => 2
        );

        // create a dummy CSV file row
        $row = array(
            0 => 'TEST-01',
            1 => 'bruno-compete-hoodie-test',
            2 => null
        );

        // create a mock subject
        $mockSubject = $this->getMockBuilder('TechDivision\Import\Product\Subjects\BunchSubject')
                            ->setMethods(
                                array(
                                    'getHeaders',
                                    'getLastSku',
                                    'getLastEntityId',
                                    'getProductCategoryIds',
                                    'getUrlRewritesByEntityTypeAndEntityId',
                                    'persistUrlRewrite',
                                    'getRootCategory',
                                    'getCategory'
                                )
                            )
                            ->getMock();
        $mockSubject->expects($this->any())
                    ->method('getHeaders')
                    ->willReturn($headers);
        $mockSubject->expects($this->exactly(2))
                    ->method('getLastEntityId')
                    ->willReturn($entityId = 61413);
        $mockSubject->expects($this->once())
                    ->method('getLastSku')
                    ->willReturn($row[$headers[ColumnKeys::SKU]] + 1);
        $mockSubject->expects($this->once())
                    ->method('getProductCategoryIds')
                    ->willReturn(array($categoryId = 2 => $entityId));
        $mockSubject->expects($this->once())
                    ->method('getUrlRewritesByEntityTypeAndEntityId')
                    ->with($entityType = 'product', $entityId)
                    ->willReturn(array());
        $mockSubject->expects($this->once())
                    ->method('getCategory')
                    ->with($categoryId)
                    ->willReturn($category = array(MemberNames::ENTITY_ID => $categoryId, MemberNames::URL_PATH));
        $mockSubject->expects($this->exactly(4))
                    ->method('getRootCategory')
                    ->willReturn($category);
        $mockSubject->expects($this->once())
                    ->method('persistUrlRewrite')
                    ->with(
                        array(
                            $entityType,
                            $entityId,
                            sprintf('%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                            sprintf('catalog/product/view/id/%s', $entityId),
                            0,
                            1,
                            null,
                            1,
                            serialize(array())
                        )
                    );

        // inject the subject und invoke the handle() method
        $this->observer->setSubject($mockSubject);
        $this->assertSame($row, $this->observer->handle($row));
    }

    /**
     * Test's the handle() method with a successfull URL rewrite persist when using the same categories.
     *
     * @return void
     */
    public function testHandleWithSuccessfullUpdateAndSameCategories()
    {

        // initialize the entity ID to use
        $entityId = 61413;

        // create a dummy CSV file row
        $headers = array(
            'sku'             => 0,
            'url_key'         => 1,
            'categories'      => 2,
            'store_view_code' => 3
        );

        // create a dummy CSV file header
        $row = array(
            0 => 'TEST-01',
            1 => 'bruno-compete-hoodie',
            2 => 'Default Category/Men/Tops/Hoodies & Sweatshirts,Default Category/Collections/Eco Friendly,Default Category',
            3 => null
        );

        // the found URL rewrites
        $urlRewrites = array(
            array(
                'url_rewrite_id'   => 744,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => null
            ),
            array(
                'url_rewrite_id'   => 745,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('men/tops-men/hoodies-and-sweatshirts-men/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s/category/16', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => serialize(array('category_id' => 16))
            ),
            array(
                'url_rewrite_id'   => 746,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('collections/eco-friendly/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s/category/37', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => serialize(array('category_id' => 37))
            ),
            array(
                'url_rewrite_id'   => 747,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('men/tops-men/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s/category/13', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => serialize(array('category_id' => 13))
            )
        );

        // create a mock subject
        $mockSubject = $this->getMockBuilder('TechDivision\Import\Product\Subjects\BunchSubject')
                            ->setMethods(
                                array(
                                    'getHeaders',
                                    'getLastSku',
                                    'getLastEntityId',
                                    'getProductCategoryIds',
                                    'getUrlRewritesByEntityTypeAndEntityId',
                                    'deleteUrlRewrite',
                                    'persistUrlRewrite',
                                    'getRootCategory',
                                    'getCategory'
                                )
                            )
                            ->getMock();
        $mockSubject->expects($this->any())
                    ->method('getHeaders')
                    ->willReturn($headers);
        $mockSubject->expects($this->any())
                    ->method('getLastEntityId')
                    ->willReturn($entityId);
        $mockSubject->expects($this->exactly(8))
                    ->method('getCategory')
                    ->withConsecutive(array(2), array(16), array(37), array(13), array(2), array(16), array(37), array(13))
                    ->willReturnOnConsecutiveCalls(
                         array(MemberNames::ENTITY_ID =>  2, MemberNames::URL_PATH => null),
                         array(MemberNames::ENTITY_ID => 16, MemberNames::URL_PATH => 'men/tops-men/hoodies-and-sweatshirts-men'),
                         array(MemberNames::ENTITY_ID => 37, MemberNames::URL_PATH => 'collections/eco-friendly'),
                         array(MemberNames::ENTITY_ID => 13, MemberNames::URL_PATH => 'men/tops-men'),
                         array(MemberNames::ENTITY_ID =>  2, MemberNames::URL_PATH => null),
                         array(MemberNames::ENTITY_ID => 16, MemberNames::URL_PATH => 'men/tops-men/hoodies-and-sweatshirts-men'),
                         array(MemberNames::ENTITY_ID => 37, MemberNames::URL_PATH => 'collections/eco-friendly'),
                         array(MemberNames::ENTITY_ID => 13, MemberNames::URL_PATH => 'men/tops-men')
                     );
        $mockSubject->expects($this->once())
                    ->method('getLastSku')
                    ->willReturn($row[$headers[ColumnKeys::SKU]] + 1);
        $mockSubject->expects($this->any())
                    ->method('getRootCategory')
                    ->willReturn(array(MemberNames::ENTITY_ID =>  2, MemberNames::URL_PATH => null));
        $mockSubject->expects($this->once())
                    ->method('getProductCategoryIds')
                    ->willReturn(array(2 => $entityId, 16 => $entityId, 37 => $entityId, 13 => $entityId));
        $mockSubject->expects($this->once())
                    ->method('getUrlRewritesByEntityTypeAndEntityId')
                    ->with($entityType = 'product', $entityId)
                    ->willReturn($urlRewrites);
        $mockSubject->expects($this->exactly(4))
                    ->method('deleteUrlRewrite')
                    ->withConsecutive(
                        array(array('url_rewrite_id' => 744)),
                        array(array('url_rewrite_id' => 745)),
                        array(array('url_rewrite_id' => 746)),
                        array(array('url_rewrite_id' => 747))
                     );
        $mockSubject->expects($this->exactly(8))
                    ->method('persistUrlRewrite')
                    ->withConsecutive(
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                301,
                                1,
                                null,
                                0,
                                serialize(array())
                            )
                        ),
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('men/tops-men/hoodies-and-sweatshirts-men/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('men/tops-men/hoodies-and-sweatshirts-men/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                301,
                                1,
                                null,
                                0,
                                serialize(array('category_id' => 16))
                            )
                        ),
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('collections/eco-friendly/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('collections/eco-friendly/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                301,
                                1,
                                null,
                                0,
                                serialize(array('category_id' => 37))
                            )
                        ),
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('men/tops-men/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('men/tops-men/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                301,
                                1,
                                null,
                                0,
                                serialize(array('category_id' => 13))
                            )
                        ),
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('catalog/product/view/id/%s', $entityId),
                                0,
                                1,
                                null,
                                1,
                                serialize(array())
                            )
                        ),
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('men/tops-men/hoodies-and-sweatshirts-men/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('catalog/product/view/id/%s/category/16', $entityId),
                                0,
                                1,
                                null,
                                1,
                                serialize(array('category_id' => 16))
                            )
                        ),
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('collections/eco-friendly/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('catalog/product/view/id/%s/category/37', $entityId),
                                0,
                                1,
                                null,
                                1,
                                serialize(array('category_id' => 37))
                            )
                        ),
                        array(
                            array(
                                'product',
                                $entityId,
                                sprintf('men/tops-men/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                                sprintf('catalog/product/view/id/%s/category/13', $entityId),
                                0,
                                1,
                                null,
                                1,
                                serialize(array('category_id' => 13))
                            )
                        )
                    );

        // inject the subject und invoke the handle() method
        $this->observer->setSubject($mockSubject);
        $this->assertSame($row, $this->observer->handle($row));
    }

    /**
     * Test's the handle() method with a successfull URL rewrite persist when using different categories.
     *
     * @return void
     */
    public function testHandleWithSuccessfullUpdateAndDifferentCategories()
    {

        // initialize the entity ID to use
        $entityId = 61413;

        // create a dummy CSV file row
        $headers = array(
            'sku'             => 0,
            'url_key'         => 1,
            'categories'      => 2,
            'store_view_code' => 3
        );

        // create a dummy CSV file header
        $row = array(
            0 => 'TEST-01',
            1 => 'bruno-compete-hoodie',
            2 => 'Default Category/Men/Bottoms/Pants,Default Category/Collections/Erin Recommends,Default Category',
            3 => null
        );

        // the found URL rewrites
        $urlRewrites = array(
            array(
                'url_rewrite_id'   => 744,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => null
            ),
            array(
                'url_rewrite_id'   => 745,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('men/tops-men/hoodies-and-sweatshirts-men/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s/category/16', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => 'a:1:{s:11:"category_id";s:2:"16";}'
            ),
            array(
                'url_rewrite_id'   => 746,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('collections/eco-friendly/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s/category/37', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => 'a:1:{s:11:"category_id";s:2:"37";}'
            ),
            array(
                'url_rewrite_id'   => 747,
                'entity_type'      => 'product',
                'entity_id'        => $entityId,
                'request_path'     => sprintf('men/tops-men/%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                'target_path'      => sprintf('catalog/product/view/id/%s/category/13', $entityId),
                'redirect_type'    => 0,
                'store_id'         => 1,
                'description'      => null,
                'is_autogenerated' => 0,
                'metadata'         => 'a:1:{s:11:"category_id";s:2:"13";}'
            )
        );

        // create a mock subject
        $mockSubject = $this->getMockBuilder('TechDivision\Import\Product\Subjects\BunchSubject')
        ->setMethods(
                array(
                    'getHeaders',
                    'getLastSku',
                    'getLastEntityId',
                    'getProductCategoryIds',
                    'getUrlRewritesByEntityTypeAndEntityId',
                    'getRootCategory',
                    'getCategory',
                    'deleteUrlRewrite',
                    'persistUrlRewrite'
                )
            )
            ->getMock();
            $mockSubject->expects($this->any())
                ->method('getHeaders')
                ->willReturn($headers);
            $mockSubject->expects($this->any())
                ->method('getLastEntityId')
                ->willReturn($entityId);
            $mockSubject->expects($this->exactly(4))
                ->method('getCategory')
                ->withConsecutive(array(2), array(2), array(19), array(35))
                ->willReturnOnConsecutiveCalls(
                    array(MemberNames::ENTITY_ID =>  2, MemberNames::URL_PATH => null),
                    array(MemberNames::ENTITY_ID =>  2, MemberNames::URL_PATH => null),
                    array(MemberNames::ENTITY_ID => 19, MemberNames::URL_PATH => 'men/bottoms-men/pants-men'),
                    array(MemberNames::ENTITY_ID => 35, MemberNames::URL_PATH => 'collections/eco-friendly')
                );
            $mockSubject->expects($this->once())
                ->method('getLastSku')
                ->willReturn($row[$headers[ColumnKeys::SKU]] + 1);
            $mockSubject->expects($this->any())
                ->method('getRootCategory')
                ->willReturn(array(MemberNames::ENTITY_ID =>  2, MemberNames::URL_PATH => null));
            $mockSubject->expects($this->once())
                ->method('getProductCategoryIds')
                ->willReturn(array(2 => $entityId, 19 => $entityId, 35 => $entityId));
            $mockSubject->expects($this->once())
                ->method('getUrlRewritesByEntityTypeAndEntityId')
                ->with($entityType = 'product', $entityId)
                ->willReturn($urlRewrites);
            $mockSubject->expects($this->exactly(4))
                ->method('deleteUrlRewrite')
                ->withConsecutive(
                    array(array('url_rewrite_id' => 744)),
                    array(array('url_rewrite_id' => 745)),
                    array(array('url_rewrite_id' => 746)),
                    array(array('url_rewrite_id' => 747))
                );
            $mockSubject->expects($this->exactly(4))
                ->method('persistUrlRewrite')
                ->withConsecutive(
                    array(
                        array(
                            'product',
                            $entityId,
                            sprintf('%s-old.html', $row[$headers[ColumnKeys::URL_KEY]]),
                            sprintf('%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                            301,
                            1,
                            null,
                            0,
                            serialize(array())
                        )
                    ),
                    array(
                        array(
                            'product',
                            $entityId,
                            sprintf('%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                            sprintf('catalog/product/view/id/%s', $entityId),
                            0,
                            1,
                            null,
                            1,
                            serialize(array())
                        )
                    ),
                    array(
                        array(
                            'product',
                            $entityId,
                            sprintf('men/bottoms-men/pants-men/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                            sprintf('catalog/product/view/id/%s/category/19', $entityId),
                            0,
                            1,
                            null,
                            1,
                            serialize(array('category_id' => 19))
                        )
                    ),
                    array(
                        array(
                            'product',
                            $entityId,
                            sprintf('collections/eco-friendly/%s.html', $row[$headers[ColumnKeys::URL_KEY]]),
                            sprintf('catalog/product/view/id/%s/category/35', $entityId),
                            0,
                            1,
                            null,
                            1,
                            serialize(array('category_id' => 35))
                        )
                    )
                );

        // inject the subject und invoke the handle() method
        $this->observer->setSubject($mockSubject);
        $this->assertSame($row, $this->observer->handle($row));
    }
}
