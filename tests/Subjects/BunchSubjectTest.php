<?php

/**
 * TechDivision\Import\Product\Subjects\BunchSubjectTest
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * PHP version 5
 *
 * @author    Tim Wagner <t.wagner@techdivision.com>
 * @copyright 2016 TechDivision GmbH <info@techdivision.com>
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link      https://github.com/techdivision/import-product
 * @link      http://www.techdivision.com
 */

namespace TechDivision\Import\Product\Subjects;

/**
 * Test class for the product action implementation.
 *
 * @author    Tim Wagner <t.wagner@techdivision.com>
 * @copyright 2016 TechDivision GmbH <info@techdivision.com>
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link      https://github.com/techdivision/import-product
 * @link      http://www.techdivision.com
 */
class BunchSubjectTest extends \PHPUnit_Framework_TestCase
{

    /**
     * The subject we want to test.
     *
     * @var \TechDivision\Import\Product\Subjects\BunchSubject
     */
    protected $subject;

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     * @see \PHPUnit_Framework_TestCase::setUp()
     */
    protected function setUp()
    {

        // create a mock registry processor
        $mockRegistryProcessor = $this->getMockBuilder('TechDivision\Import\Services\RegistryProcessorInterface')
                                      ->setMethods(get_class_methods('TechDivision\Import\Services\RegistryProcessorInterface'))
                                      ->getMock();

        // create a mock product processor
        $mockProductProcessor = $this->getMockBuilder('TechDivision\Import\Product\Services\ProductBunchProcessorInterface')
                                     ->setMethods(get_class_methods('TechDivision\Import\Product\Services\ProductBunchProcessorInterface'))
                                     ->getMock();

        // create a generator
        $mockGenerator = $this->getMockBuilder('TechDivision\Import\Utils\Generators\GeneratorInterface')
                              ->setMethods(get_class_methods('TechDivision\Import\Utils\Generators\GeneratorInterface'))
                              ->getMock();

        // create the subject to be tested
        $this->subject = new BunchSubject(
            $mockRegistryProcessor,
            $mockGenerator,
            array(),
            $mockProductProcessor
        );
    }

    /**
     * Test's the getUrlRewritesByEntityTypeAndEntityId() method successfull.
     *
     * @return void
     */
    public function testGetUrlRewritesByEntityTypeAndEntityId()
    {

        // load a mock processor
        $mockProcessor = $this->getMockBuilder($processorInterface = 'TechDivision\Import\Product\Services\ProductBunchProcessorInterface')
                              ->setMethods(get_class_methods($processorInterface))
                              ->getMock();
        $mockProcessor->expects($this->once())
                      ->method('getUrlRewritesByEntityTypeAndEntityId')
                      ->with($entityType = 'product', $entityId = 61413)
                      ->willReturn(
                          $expected = array(
                              'url_rewrite_id'   => 744,
                              'entity_type'      => 'product',
                              'entity_id'        => $entityId,
                              'request_path'     => 'bruno-compete-hoodie-test.html',
                              'target_path'      => sprintf('catalog/product/view/id/%d', $entityId),
                              'redirect_type'    => 0,
                              'store_id'         => 1,
                              'description'      => 'A custom rewrite',
                              'is_autogenerated' => 1,
                              'metadata'         => null
                          )
                      );

        // create a mock subject configuration
        $mockSubjectConfiguration = $this->getMockBuilder('TechDivision\Import\Configuration\SubjectConfigurationInterface')
                                         ->setMethods(get_class_methods('TechDivision\Import\Configuration\SubjectConfigurationInterface'))
                                         ->getMock();

        // inject the processor + configuration
        $this->subject->setProductProcessor($mockProcessor);
        $this->subject->setConfiguration($mockSubjectConfiguration);

        // make sure we get the expected array with URL rewrites
        $this->assertSame($expected, $this->subject->getUrlRewritesByEntityTypeAndEntityId($entityType, $entityId));
    }

    /**
     * Test's the persistUrlRewrite() method successfull.
     *
     * @return void
     */
    public function testPersistUrlRewriteSuccessufull()
    {

        // load a mock processor
        $mockProcessor = $this->getMockBuilder($processorInterface = 'TechDivision\Import\Product\Services\ProductBunchProcessorInterface')
                              ->setMethods(get_class_methods($processorInterface))
                              ->getMock();
        $mockProcessor->expects($this->once())
                      ->method('persistUrlRewrite')
                      ->with(
                          $urlRewrite = array(
                              'url_rewrite_id'   => 744,
                              'entity_type'      => 'product',
                              'entity_id'        => $entityId = 61413,
                              'request_path'     => 'bruno-compete-hoodie-test.html',
                              'target_path'      => sprintf('catalog/product/view/id/%d', $entityId),
                              'redirect_type'    => 0,
                              'store_id'         => 1,
                              'description'      => 'A custom rewrite',
                              'is_autogenerated' => 1,
                              'metadata'         => null
                          )
                      )
                      ->willReturn(null);

        // inject the processor
        $this->subject->setProductProcessor($mockProcessor);

        // make sure that the URL rewrite will be persisted
        $this->assertNull($this->subject->persistUrlRewrite($urlRewrite));
    }

    /**
     * Test's the deleteUrlRewrite() method successfull.
     *
     * @return void
     */
    public function testDeleteUrlRewriteSuccessufull()
    {

        // load a mock processor
        $mockProcessor = $this->getMockBuilder($processorInterface = 'TechDivision\Import\Product\Services\ProductBunchProcessorInterface')
                              ->setMethods(get_class_methods($processorInterface))
                              ->getMock();
        $mockProcessor->expects($this->once())
                      ->method('deleteUrlRewrite')
                      ->with($urlRewrite = array('url_rewrite_id' => 744))
                      ->willReturn(null);

        // inject the processor
        $this->subject->setProductProcessor($mockProcessor);

        // make sure that the URL rewrite will be removed
        $this->assertNull($this->subject->deleteUrlRewrite($urlRewrite));
    }
}
